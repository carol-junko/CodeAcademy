// Returns a random DNA base
const returnRandBase = () => {
  const dnaBases = ['A', 'T', 'C', 'G']
  return dnaBases[Math.floor(Math.random() * 4)] 
};

// Returns a random single stand of DNA containing 15 bases
const mockUpStrand = () => {
  const newStrand = []
  for (let i = 0; i < 15; i++) {
    newStrand.push(returnRandBase())
  }
  return newStrand
};

const pAequorFactory = (number, dna) => {
  return {
    specimenNum: number,
    dna: dna,

    mutate() {
      let mutateDna = mockUpStrand();
      while(this.dna[0] === mutateDna[0]){
        mutateDna = mockUpStrand();
      };
      return this.dna = mutateDna;
    },

    compareDna(pAequorDna) {
      let commonElement = 0;
      for(i = 0; i < 15; i++){
        if(this.dna[i] === pAequorDna.dna[i]){
          commonElement++;
        };
      };
      let percentNumber = (commonElement/15)*100;
      return console.log(`specimen #1 and specimen #2 have ${percentNumber.toFixed()}% DNA in common.`)
    },

    willLikelySurvive() {
      let cORgBase = 0;
      
      for(i = 0; i < 15; i++){
        if(this.dna[i] === 'C' || this.dna[i] === 'G'){
          cORgBase++;
        };
       };

      let survivalChange = (cORgBase/15)*100;
      if(survivalChange.toFixed() >= 60){
        return true;
      } else {
        return false;
      };
    }


  };
};

function thirtyIntances(){
  let i = 1;
  let thirtyIntancesArray = [];

  while(thirtyIntancesArray.length < 30){
    let pAequor = pAequorFactory(i,mockUpStrand());
    if(pAequor.willLikelySurvive() === true){
      thirtyIntancesArray.push(pAequor);
      i++;
    };
  };
  
  return thirtyIntancesArray;
};

const teste = thirtyIntances();
console.log(teste);





